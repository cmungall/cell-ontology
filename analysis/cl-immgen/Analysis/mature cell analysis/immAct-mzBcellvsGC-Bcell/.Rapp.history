library(aroma.affymetrix)
verbose <- Arguments$getVerbose(-8, timestamp=TRUE)
chipType <- "MoGene-1_0-st-v1"
cdf <- AffymetrixCdfFile$byChipType(chipType, tags="r3")
cs <- AffymetrixCelSet$byName("test", cdf=cdf)
bc <- GcRmaBackgroundCorrection(cs)
csBC <- process(bc,verbose=verbose)
?GcRmaBackgroundCorrection
bc <- GcRmaBackgroundCorrection(cs, type=c("affinities"))
csBC <- process(bc,verbose=verbose)
bc <- GcRmaBackgroundCorrection(cs, type="affinities")
csBC <- process(bc,verbose=verbose)
library(aroma.affymetrix)
verbose <- Arguments$getVerbose(-8, timestamp=TRUE)
chipType <- "MoGene-1_0-st-v1"
cdf <- AffymetrixCdfFile$byChipType(chipType, tags="r3")
cs <- AffymetrixCelSet$byName("test", cdf=cdf)
bc <- GcRmaBackgroundCorrection(cs)
csBC <- process(bc,verbose=verbose)
qn <- QuantileNormalization(csBC, typesToUpdate="pm")
csBC
library(aroma.affymetrix)
verbose <- Arguments$getVerbose(-8, timestamp=TRUE)
chipType <- "MoGene-1_0-st-v1"
cdf <- AffymetrixCdfFile$byChipType(chipType, tags="r3")
cs <- AffymetrixCelSet$byName("test", cdf=cdf)
bc <- GcRmaBackgroundCorrection(cs, type="affinities")
csBC <- process(bc,verbose=verbose)
qn <- QuantileNormalization(csBC, typesToUpdate="pm")
qn <- QuantileNormalization(csB, typesToUpdate="pm")
print(csBC)
library(aroma.affymetrix)
verbose <- Arguments$getVerbose(-8, timestamp=TRUE)
chipType <- "MoGene-1_0-st-v1"
cdf <- AffymetrixCdfFile$byChipType(chipType, tags="r3")
cs <- AffymetrixCelSet$byName("test", cdf=cdf)
bc <- GcRmaBackgroundCorrection(cs, type"affinities")
bc <- GcRmaBackgroundCorrection(cs, type="affinities")
print(bc)
?GcRMABackgroundCorrection
?RMABackgroundCorrection
csBC <- process(bc,verbose=verbose)
print (csBC)
print (GRBC)
ls
ls()
print(bc)
qn <- QuantileNormalization(bc, typesToUpdate="pm")
csBC <- process(bc,verbose=0)
library(aroma.affymetrix)
verbose <- Arguments$getVerbose(-8, timestamp=TRUE)
chipType <- "MoGene-1_0-st-v1"
cdf <- AffymetrixCdfFile$byChipType(chipType, tags="r3")
cs <- AffymetrixCelSet$byName("test", cdf=cdf)
bc <- RmaBackgroundCorrection(cs)
csBC <- process(bc,verbose=verbose)
qn <- QuantileNormalization(csBC, typesToUpdate="pm")
csN <- process(qn, verbose=verbose)
plm <- RmaPlm(csN)
fit(plm, verbose=verbose)
qam <- QualityAssessmentModel(plm)
plotNuse(qam)
plotRle(qam)
ces <- getChipEffectSet(plm)
es <- extractESet(ces)
es <- extractExprSet(ces)
gExprs <- extractDataFrame(ces)
print(gExprs)
?eset
rs <- calculateResiduals(plm, verbose=verbose)
ae <- ArrayExplorer(rs)
setColorMaps(ae, c("log2,log2neg,rainbow", "log2,log2pos,rainbow"))
process(ae, interleaved="auto", verbose=verbose)
display(ae)
?ArrayExplorer
?display
display(ae, Users\tmeehan\reports\test\RBC,QN,RMA\ArrayExplorer.html)
display()
source("http://bioconductor.org/biocLite.R")#
biocLite("oligo")
library(limma)
limmaUsersGuide()
source("http://bioconductor.org/biocLite.R")
biocLite("ontoCAT")
library("ontoCAT")
install.packages('rJava',,'http://www.rforge.net/')
library("ontocat")
libary("ontoCat")
library("ontoCat")
library("ontoCAT")
cell <- getOntologyParser("http://obo.cvs.sourceforge.net/viewvc/obo/obo/ontology/anatomy/cell_type/cell.obo")
get AllTermChildren(cell, "macrophage")
get AllTermChildren(cell, " macrophage")
get AllTermChildren(cell, " CL:0000008")
getAllterms(cell)
getAllTerms(cell)
getAllTermChildren(cell, CL_0000814)
getAllTermChildren(cell, mature NK T cell)
Tc17 cell
?getAllTermChildren
getAllTermChildren(cell,CL_0000814)
getAllTermChildren(cell, 1483)
getAllTermChildren(cell, CL_0000814:)
getAllTermChildren(cell, CL:0000814)
getAllTermChildren(cell, CL_0000814)
getAllTermChildren(CL_0000814)
getAllTermIds(cell)
getTermNameById(cell, "CL_0002420")
getAllTermChildren(cell, "CL_0002420")
getAllTermChildren(cell, "DN2 thymocyte")
library(Biobase)
library(limma)
library(affy); library(limma); library(mogene10stv1cdf); library(mogene10sttranscriptcluster.db); library(affycoretools); library(puma)
library()
library(ontoCat)
library()
library(ontoCAT)
?ontoCAT
getOntologyParser("/Users/tmeehan/obo/ontology/anatomy/cell_type/cell.edit.obo-asserted")
getAllTermIds(cell.edit.obo-asserted)
getAllTermIds()
CL <- getOntologyParser(/Users/tmeehan/obo/ontology/anatomy/cell_type/cell.edit.obo-asserted)
CL <- getOntologyParser("/Users/tmeehan/obo/ontology/anatomy/cell_type/cell.edit.obo-asserted")
getAllTermIds(CL)
library("ontoCAT")
CL <- getOntologyParser("/Users/tmeehan/obo/ontology/anatomy/cell_type/simpleCL_pw")
getAllTerms(CL)
getAllTermChildren(CL, "CL:0000624")
getAllTermChildren(CL,"CL:0000624")
getAllTermChildren(CL,"CL_0000624")
getAllTermIdsChildren(CL,"CL_0000624")
getTreeDownTo(CL,"CL_0000624")
?getAllTermChildren
?getAccession
x <- getAllTermChildren(CL,"CL_0000624")
getAccession(x)
x
mylist <-list()
mylist[[1]] <- x
mylist
y <- getAllTermChildren(CL,"CL_0000813")
mylist[[2]] <- y
mylist
x <- function(q) Reduce('intersect', q)
y <- x(mylist[1:length(z)])
y <- x(mylist[1:2)
y <- x(mylist[1:2])
y
y <- x(mylist)
y
y <- x(mylist[1:500])
y
y <- x(mylist[1:5000])
y
mylist
x <- function(q) Reduce('intersect', q)
y <- x(mylist[[1:2]]
)
mylist
mylist[[1]]
attributes(mylist)
names(mylist)
my_list[[1]][2]
mylist[[1]][2]
library("ontoCAT")
CL <- getOntologyParser("/Users/tmeehan/obo/ontology/anatomy/cell_type/simpleCL_pw")
x <- getAllTermChildren(CL,"CL_0000624")
mylist <-list()
y <- getAllTermChildren(CL, "CL_0000895")
mylist <- list()
mylist[[1]] <- x
mylist[[2]] <- y
x <- function(q) Reduce('intersect', q)
y <- x(mylist[1:2])
y <- getAllTermChildren(CL, "CL_0000895")
mylist <- list()
library("ontoCAT")
CL <- getOntologyParser("/Users/tmeehan/obo/ontology/anatomy/cell_type/simpleCL_pw")
a <- getAllTermChildren(CL,"CL_0000624")
b <- getAllTermChildren(CL,"CL:0000813")
b <- getAllTermChildren(CL,"CL_0000813")
mylist <-list()
mylist[[1]] <- a
mylist[[2]] <- b
mylist
x <- function(q) Reduce('intersect', q)
y <- x(mylist[1:2])
y
> intersection <- function(x, y, ...){#
+ #
+      if (missing(...)) intersect(x, y)#
+  else intersect(x, intersection(y, ...))#
+  }
intersection <- function(x, y, ...){#
+ #
+      if (missing(...)) intersect(x, y)#
+  else intersect(x, intersection(y, ...))#
+  }
intersection <- function(x, y, ...){
if (missing(...)) intersect(x, y)
else intersect(x, intersection(y, ...))
}
intersection(mylist[[1]],mylist[[2]])
"%i%" <- intersect
a %i% b
a
b
a %i% b
a %i% a
?as.vector
av < as.vector(a)
av <- as.vector(a)
bv <- as.vector(b)
mylist <- list()
av
mylist[[1]] <- av
mylist[[2]] <- bv
x <- function(q) Reduce('intersect', q)
y <- x(mylist[1:2])
y
av <- as.list(a)
bv <- as.list(b)
mylist[[1]] <- av
mylist[[2]] <- bv
x <- function(q) Reduce('intersect', q)
y <- x(mylist[1:2])
y
y <- x(mylist[[1:2]])
mylist[1]
library("ontoCAT")
CL <- getOntologyParser("/Users/tmeehan/obo/ontology/anatomy/cell_type/simpleCL_pw")
a <- getTermAndAllChildrenIds(CL,"CL_0000624")
a
b <- getTermAndAllChildrenIds(CL,"CL_0000813")
mylist <-list()
mylist[[1]] <- a
mylist[[2]] <- b
x <- function(q) Reduce('intersect', q)
y <- x(mylist[1:2])
y
a
b
?getTermAndAllChildrenIds
?getAllChildrenIds
?getAllTermChildren
a
getTermAndAllChildrenIds(CL,"CL_0000624")
source("/Users/tmeehan/array analysis/r-run-act")
signature("activatedMature")
signature("activatedMature")
z
signature("activatedMature")
signature("activatedMature")
source("/Users/tmeehan/array analysis/r-run-act")
signature("activatedMature")
signature("activatedImmature")
signature("activatedImmature")
signature("actMature-mzBvsGCBcell")
signature("immAct-mzBcellvsGC-Bcell")
